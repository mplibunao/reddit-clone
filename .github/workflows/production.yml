# This is a basic workflow to help you get started with Actions

name: production-deployment

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  release:
    types: [published]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment:
      name: api-production
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Build image
        run: DOCKER_BUILDKIT=1 docker build . --file ./server/Dockerfile --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"
      
      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        id: push_image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          echo IMAGE_ID=$IMAGE_ID
          echo ::set-output name=image_id::$(echo ${IMAGE_ID})
          echo VERSION=$VERSION
          echo ::set-output name=image_version::$(echo ${VERSION})
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

      - name: SSH and deploy docker image
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          #passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            docker pull ${{ steps.push_image.outputs.image_id }}:${{ steps.push_image.outputs.image_version }}
            docker tag ${{ steps.push_image.outputs.image_id }}:${{ steps.push_image.outputs.image_version }} dokku/api:${{ steps.push_image.outputs.image_version }}
            dokku config:set --no-restart api NEXT_JS_HOST=${{ secrets.NEXT_JS_HOST }} SESSION_SECRET=${{ secrets.SESSION_SECRET }} DOMAIN=${{ secrets.DOMAIN }}
            dokku tags:deploy api ${{ steps.push_image.outputs.image_version }}
