# This is a basic workflow to help you get started with Actions

name: productino-deployment

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  release:
    types: [published]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: lireddit

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get the version
        id: vars
        run: |
          echo ::set-output name=image_version::$(echo ${GITHUB_REF:10})
          echo ::set-output name=image_tag::$(echo ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${ GITHUB_REF:10 })

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ steps.vars.outputs.image_tag }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          file: ./server/Dockerfile
          #push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.vars.outputs.image_tag }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: SSH and deploy docker image
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            docker pull ${{ steps.vars.outputs.image_tag }}
            docker tag ${{ steps.vars.outputs.image_tag }} dokku/api:${{ steps.vars.outputs.image_version }}
            dokku config:set --no-restart api NEXT_JS_HOST=${{ secrets.NEXT_JS_HOST }} SESSION_SECRET=${{ secrets.SESSION_SECRET }}
            dokku tags:deploy api ${{ steps.vars.outputs.image_tag }}
